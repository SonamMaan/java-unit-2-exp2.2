import java.io.*;
import java.util.*;

// -------- Helper Class: Student --------
class Student implements Serializable {
    private int studentID;
    private String name;
    private String grade;

    public Student(int studentID, String name, String grade) {
        this.studentID = studentID;
        this.name = name;
        this.grade = grade;
    }

    public int getStudentID() { return studentID; }
    public String getName() { return name; }
    public String getGrade() { return grade; }

    @Override
    public String toString() {
        return "StudentID: " + studentID + ", Name: " + name + ", Grade: " + grade;
    }
}

// -------- Helper Class: Employee --------
class Employee implements Serializable {
    private int id;
    private String name;
    private String designation;
    private double salary;

    public Employee(int id, String name, String designation, double salary) {
        this.id = id;
        this.name = name;
        this.designation = designation;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "EmployeeID: " + id + ", Name: " + name +
               ", Designation: " + designation + ", Salary: " + salary;
    }
}

// -------- Main Class --------
public class CombinedProgram {

    // ---------- Part A: Sum of Integers ----------
    public static void sumOfIntegers() {
        Scanner sc = new Scanner(System.in);
        ArrayList<Integer> numbers = new ArrayList<>();
        System.out.println("Enter integers (type 'done' to finish):");

        while (true) {
            String input = sc.next();
            if (input.equalsIgnoreCase("done")) break;
            try {
                Integer num = Integer.parseInt(input); // parsing (String → int → Integer)
                numbers.add(num); // autoboxing
            } catch (NumberFormatException e) {
                System.out.println("Invalid input! Enter an integer or 'done'.");
            }
        }

        int sum = 0;
        for (Integer num : numbers) {
            sum += num; // unboxing
        }
        System.out.println("Sum of entered integers = " + sum);
    }

    // ---------- Part B: Serialization ----------
    public static void studentSerialization() {
        try {
            Student s1 = new Student(1, "Alice", "A");

            // Serialize
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("student.ser"));
            oos.writeObject(s1);
            oos.close();
            System.out.println("Student serialized!");

            // Deserialize
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream("student.ser"));
            Student s2 = (Student) ois.readObject();
            ois.close();
            System.out.println("Deserialized Student: " + s2);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // ---------- Part C: Employee Management ----------
    public static void employeeMenu() {
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n--- Employee Management Menu ---");
            System.out.println("1. Add Employee");
            System.out.println("2. Display Employees");
            System.out.println("3. Exit");
            System.out.print("Enter choice: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("employees.ser", true)) {
                        @Override
                        protected void writeStreamHeader() throws IOException {
                            reset(); // prevent header corruption on append
                        }
                    }) {
                        System.out.print("Enter ID: ");
                        int id = sc.nextInt();
                        sc.nextLine(); // consume newline
                        System.out.print("Enter Name: ");
                        String name = sc.nextLine();
                        System.out.print("Enter Designation: ");
                        String desig = sc.nextLine();
                        System.out.print("Enter Salary: ");
                        double sal = sc.nextDouble();

                        Employee emp = new Employee(id, name, desig, sal);
                        oos.writeObject(emp);
                        System.out.println("Employee added!");
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    break;

                case 2:
                    try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("employees.ser"))) {
                        System.out.println("--- Employee List ---");
                        while (true) {
                            Employee emp = (Employee) ois.readObject();
                            System.out.println(emp);
                        }
                    } catch (EOFException e) {
                        // End of file reached → stop reading
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;

                case 3:
                    System.out.println("Exiting Employee Management System...");
                    return;

                default:
                    System.out.println("Invalid choice!");
            }
        }
    }

    // ---------- Main Menu ----------
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.println("\n=== Main Menu ===");
            System.out.println("1. Sum of Integers (Autoboxing/Unboxing)");
            System.out.println("2. Student Serialization/Deserialization");
            System.out.println("3. Employee Management System");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1: sumOfIntegers(); break;
                case 2: studentSerialization(); break;
                case 3: employeeMenu(); break;
                case 4: System.out.println("Goodbye!"); return;
                default: System.out.println("Invalid choice!");
            }
        }
    }
}
