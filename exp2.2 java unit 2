import java.io.*;
import java.util.*;

// ===================== Part B: Student Class =====================
class Student implements Serializable {
    private static final long serialVersionUID = 1L;
    int studentID;
    String name;
    String grade;

    public Student(int studentID, String name, String grade) {
        this.studentID = studentID;
        this.name = name;
        this.grade = grade;
    }

    public void display() {
        System.out.println("ID: " + studentID + ", Name: " + name + ", Grade: " + grade);
    }
}

// ===================== Part C: Employee Class =====================
class Employee {
    int id;
    String name;
    String designation;
    double salary;

    public Employee(int id, String name, String designation, double salary) {
        this.id = id;
        this.name = name;
        this.designation = designation;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return id + " | " + name + " | " + designation + " | " + salary;
    }
}

// ===================== Main Program =====================
public class CombinedProgram {
    private static final String EMPLOYEE_FILE = "employees.txt";
    private static final String STUDENT_FILE = "student.dat";

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n========== Main Menu ==========");
            System.out.println("1. Part A: Sum of Integers");
            System.out.println("2. Part B: Student Serialization/Deserialization");
            System.out.println("3. Part C: Employee Management System");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    sumOfIntegers(sc);
                    break;
                case 2:
                    studentSerialization(sc);
                    break;
                case 3:
                    employeeManagement(sc);
                    break;
                case 4:
                    System.out.println("Exiting... Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice! Try again.");
            }
        } while (choice != 4);
    }

    // ===================== Part A: Sum of Integers =====================
    private static void sumOfIntegers(Scanner sc) {
        ArrayList<Integer> numbers = new ArrayList<>();
        System.out.println("\nEnter integers (type 'done' to stop):");

        while (true) {
            String input = sc.next();
            if (input.equalsIgnoreCase("done")) break;
            int num = Integer.parseInt(input); // parsing string to int
            numbers.add(num); // autoboxing
        }

        int sum = 0;
        for (Integer n : numbers) {
            sum += n; // unboxing
        }

        System.out.println("Numbers: " + numbers);
        System.out.println("Sum = " + sum);
    }

    // ===================== Part B: Student Serialization =====================
    private static void studentSerialization(Scanner sc) {
        System.out.println("\n--- Student Serialization ---");
        System.out.print("Enter Student ID: ");
        int id = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter Student Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Grade: ");
        String grade = sc.nextLine();

        Student s1 = new Student(id, name, grade);

        // Serialize
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(STUDENT_FILE))) {
            oos.writeObject(s1);
            System.out.println("Student serialized successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Deserialize
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(STUDENT_FILE))) {
            Student s2 = (Student) ois.readObject();
            System.out.println("Deserialized Student:");
            s2.display();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    // ===================== Part C: Employee Management =====================
    private static void employeeManagement(Scanner sc) {
        int choice;
        do {
            System.out.println("\n--- Employee Management System ---");
            System.out.println("1. Add Employee");
            System.out.println("2. Display All Employees");
            System.out.println("3. Back to Main Menu");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();
            sc.nextLine();

            switch (choice) {
                case 1:
                    addEmployee(sc);
                    break;
                case 2:
                    displayEmployees();
                    break;
                case 3:
                    System.out.println("Returning to Main Menu...");
                    break;
                default:
                    System.out.println("Invalid choice! Try again.");
            }
        } while (choice != 3);
    }

    private static void addEmployee(Scanner sc) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(EMPLOYEE_FILE, true))) {
            System.out.print("Enter ID: ");
            int id = sc.nextInt();
            sc.nextLine();
            System.out.print("Enter Name: ");
            String name = sc.nextLine();
            System.out.print("Enter Designation: ");
            String designation = sc.nextLine();
            System.out.print("Enter Salary: ");
            double salary = sc.nextDouble();

            Employee emp = new Employee(id, name, designation, salary);
            bw.write(emp.toString());
            bw.newLine();
            System.out.println("Employee added successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void displayEmployees() {
        try (BufferedReader br = new BufferedReader(new FileReader(EMPLOYEE_FILE))) {
            String line;
            System.out.println("\n--- Employee Records ---");
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
            System.out.println("-------------------------");
        } catch (IOException e) {
            System.out.println("No employees found.");
        }
    }
}
